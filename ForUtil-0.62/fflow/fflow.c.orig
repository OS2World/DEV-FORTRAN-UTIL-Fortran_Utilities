/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 9
#define YY_END_OF_BUFFER 10
static yyconst short int yy_acclist[40] =
    {   0,
        6,    6,   10,    8,    9,    7,    9,    8,    9,    8,
        9,    1,    8,    9,    9,    9,    6,    9,    1,    1,
        6,    1,    1,    1,    1,    5,    1,    5,    5,    1,
        5,    5,    5,    2,    2,    3,    3,    4,    4
    } ;

static yyconst short int yy_accept[77] =
    {   0,
        1,    1,    1,    2,    3,    4,    6,    8,   10,   12,
       15,   16,   17,   19,   19,   19,   20,   21,   21,   22,
       22,   22,   22,   23,   24,   24,   24,   25,   25,   25,
       26,   27,   27,   29,   30,   30,   30,   30,   30,   30,
       30,   30,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   33,   33,   33,   33,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   35,   36,   36,   37,
       38,   38,   38,   39,   40,   40
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    1,    1,    5,    5,
        6,    7,    1,    1,    1,    1,    1,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,   11,   12,   13,    8,   14,   15,
       16,    8,   17,    8,    8,   18,   19,   20,   21,   22,
        8,   23,   24,   25,   26,    8,    8,    8,    8,    8,
        1,    1,    1,    1,   10,    1,   11,   12,   13,    8,

       14,   15,   16,    8,   17,    8,    8,   18,   19,   20,
       21,   22,    8,   23,   24,   25,   26,    8,    8,    8,
        8,    8,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[27] =
    {   0,
        1,    2,    3,    4,    5,    5,    2,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2
    } ;

static yyconst short int yy_base[81] =
    {   0,
        0,    4,   17,   26,  127,    0,    8,  229,   11,   12,
       35,  229,   44,   36,   37,    0,   50,   63,   72,   53,
      115,   54,   58,  109,   91,   73,   76,   74,   74,   73,
       64,   86,   55,   39,  109,    0,   32,   78,   80,   46,
       81,   21,   82,   83,  100,  102,  110,  103,  121,  117,
      137,  128,  127,  133,  142,  132,  149,  143,  153,  157,
      160,  163,  169,  164,  178,  229,  175,  184,  229,  185,
      187,  190,  229,  193,  229,  208,  213,  218,  223,  224
    } ;

static yyconst short int yy_def[81] =
    {   0,
       76,   76,   77,   77,   75,   75,   75,   75,   75,   78,
       79,   75,   79,   75,   75,   78,   78,   79,   79,   75,
       75,   75,   78,   78,   75,   75,   78,   75,   75,   78,
       75,   80,   78,   75,   80,   35,   80,   80,   80,   80,
       80,   78,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   75,   80,   80,   75,   80,
       80,   80,   75,   80,    0,   75,   75,   75,   75,   75
    } ;

static yyconst short int yy_nxt[256] =
    {   0,
       75,   14,    7,   14,    8,    9,    7,    9,    8,   14,
       10,   14,   15,   17,   15,   17,   10,   11,   11,   12,
       12,   12,   12,   11,   42,   11,   11,   11,   12,   12,
       12,   12,   11,   75,   11,   18,   18,   20,   22,   20,
       22,   18,   34,   18,   18,   18,   39,   75,   21,   21,
       18,   23,   18,   23,   20,   26,   20,   26,   42,   23,
       39,   23,   24,   18,   18,   21,   21,   34,   45,   18,
       24,   18,   18,   18,   29,   32,   29,   32,   18,   75,
       18,   75,   75,   75,   75,   21,   21,   35,   43,   36,
       33,   31,   39,   30,   39,   39,   39,   39,   38,   47,

       39,   75,   48,   75,   75,   44,   46,   40,   28,   41,
       35,   75,   36,   50,   39,   52,   39,   39,   75,   27,
       49,   38,   75,   39,   39,   25,   75,   51,   75,   75,
       40,   39,   41,   75,   75,   39,   53,   75,   75,   54,
       55,   39,   39,   75,   75,   55,   39,   39,   59,   57,
       75,   39,   56,   58,   75,   75,   39,   39,   75,   60,
       75,   75,   75,   39,   75,   75,   75,   39,   61,   75,
       66,   39,   67,   62,   39,   63,   75,   39,   39,   69,
       68,   70,   65,   39,   64,   75,   75,   75,   75,   39,
       75,   73,   39,   74,   75,   75,   75,   75,   39,   39,

       72,   39,   75,   71,   39,   75,   75,   39,    6,    6,
        6,    6,    6,   13,   13,   13,   13,   13,   16,   16,
       75,   16,   16,   19,   19,   37,   75,   37,    5,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75
    } ;

static yyconst short int yy_chk[256] =
    {   0,
        0,    6,    1,    6,    1,    2,    2,    2,    2,    7,
        2,    7,    9,   10,    9,   10,    2,    3,    3,    3,
        3,    3,    3,    3,   42,    3,    4,    4,    4,    4,
        4,    4,    4,   37,    4,   11,   11,   14,   15,   14,
       15,   11,   34,   11,   13,   13,   37,   40,   14,   15,
       13,   17,   13,   17,   20,   22,   20,   22,   33,   23,
       40,   23,   17,   18,   18,   20,   22,   31,   40,   18,
       23,   18,   19,   19,   26,   29,   26,   29,   19,   38,
       19,   39,   41,   43,   44,   26,   29,   32,   38,   32,
       30,   28,   38,   27,   39,   41,   43,   44,   32,   43,

       32,   45,   44,   46,   48,   39,   41,   32,   25,   32,
       35,   47,   35,   46,   45,   48,   46,   48,   50,   24,
       45,   35,   49,   35,   47,   21,    5,   47,   53,   52,
       35,   50,   35,   56,   54,   49,   49,    0,   51,   50,
       51,   53,   52,   55,   58,   55,   56,   54,   56,   53,
       57,   51,   52,   54,   59,    0,   55,   58,   60,   57,
        0,   61,    0,   57,   62,   64,    0,   59,   58,    0,
       63,   60,   63,   59,   61,   60,   67,   62,   64,   65,
       64,   65,   62,   63,   61,   68,   70,    0,   71,   67,
        0,   72,   65,   72,   74,    0,    0,    0,   68,   70,

       71,   71,    0,   68,   72,    0,    0,   74,   76,   76,
       76,   76,   76,   77,   77,   77,   77,   77,   78,   78,
        0,   78,   78,   79,   79,   80,    0,   80,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "fflow.l"
#define INITIAL 0
#line 2 "fflow.l"
#ifndef lint
static char rcsId[]="$Source: /usr/local/rcs/ForUtil/fflow/RCS/fflow.l,v $";
#endif
/*****
* fflow.l : lexical analyzer for Fortran Source files
*
* This file Version	$Revision: 1.9 $
*
* Creation date:	Mon Feb  5 02:26:23 GMT+0100 1996
* Last modification: 	$Date: 1996/08/28 17:45:21 $
* By:			$Author: koen $
* Current State:	$State: Exp $
*
* Author:		koen
* (C)Copyright 1995-1996 Ripley Software Development
* All Rights Reserved
*
* This program has one undocumented switch for debugging purposes:
* -m for memory information under msdos
*****/
/*****
* ChangeLog
* $Log: fflow.l,v $
* Revision 1.9  1996/08/28 17:45:21  koen
* Added print_version_id; added the -llevel option and appropriate changes.
*
* Revision 1.8  1996/08/27 19:16:01  koen
* Heavy changes: updated scanner rules; optimized memory allocation routines; 
* moved a number of routines to libflow.c
*
* Revision 1.7  1996/08/07 21:14:24  koen
* Updated for MSDOS and added warning messages when -I, -E or -x is exceeded
*
* Revision 1.6  1996/08/02 14:50:29  koen
* Added the -n and -n- options. Moved all system dependencies to lib/sysdeps.h
*
* Revision 1.5  1996/07/30 02:00:57  koen
* Changed output stuff.
* Added missing things to command line options.
* Added version information.
* Changed the ignore_this_file routine to use strstr.
* Fixed a bug which left files open when a file was to be ignored.
*
* Revision 1.4  1996/07/16 09:05:44  koen
* cmd_line related bug fixed.
* Changed all fprintf(stderr,...) to printf(...) where output on stdout is
* expected
*
* Revision 1.3  1996/05/06 00:34:40  koen
* Adapted for MSDOS.
*
* Revision 1.2  1996/02/05 01:45:29  koen
* Added the inline define for systems without __inline__ (noticably HP-UX).
*
* Revision 1.1  1996/02/05 01:28:07  koen
* Initial revision
*
*****/ 
#ifdef HAVE_CONFIG_H
#include "autoconf.h"
#endif

#include <stdio.h> 
#include <string.h>
#include <errno.h>

#include "forutil.h"
#include "memmacros.h"
#include "version.h"
#include "libflow.h"

/**** Private Variables ****/
static int skip_unknowns, ignore_empty_funcs;
static int start_at_program, ignore_unused_funcs, start_at_named_function;
static int complete_graph, never_invoked, no_graph; 
static int output_line, verbose, cutoff_depth;
static char *sep_char, *base_function_name, *outfile;
static char cmd_line[MAXPATHLEN];
static FILE *output_file;

static char *usage = {"Usage: %s [-cefhinpqtuv] [-Eext] [-Idir] [-ddepth] [-ofile] [-llevel] [-sname] [-xname] [files]\n\n"
" Generates a (partial) flowgraph of a collection of fortran files\n\n"
" Options\n"
"\t-c: generate a complete flowgraph for each subroutine or function\n"
"\t-e: ignore functions without calls\n"
"\t-f: print precise location of filenames. Otherwise print name\n"
"\t    of file only.\n"
"\t-h, --help: print this help\n"
"\t-i: ignore unknown function calls\n"
"\t-n: tell what subroutines are never invoked. Use -n- to only check for\n"
"\t    this and you do not want a flowgraph\n"
"\t-p: start flowgraph at PROGRAM definition\n"
"\t-q: be really quiet (usefull if called from a script)\n"
"\t-t: use tabs instead of | as depth indicator\n"
"\t-u: ignore unused subroutines\n"
"\t-v: be verbose\n"
"\t--version: display version number\n"
"\t-Eext: extensions to use for retrieving files. Multiple -E allowed.\n"
"\t-Idir: get files from directory dir. Multiple -I allowed\n"
"\t-ddepth: maximum recursion depth, default is %i\n"
"\t-llevel: Generate a flowgraph up to level deep\n"
"\t-ofile: file to write flowgraph to, default is stdout\n"
"\t-sname: use <name> as the topmost function\n"
"\t-xname.f: exclude file. Multiple -x allowed\n\n"
" Currently, fflow only looks at CALL, so although FUNCTION is found, these \n"
" do not show up in the flowgraph\n\n"
"(C)Copyright 1995-1996 by Ripley Software Development\n"};

/**** Private Function prototypes ****/
static void print_flow_graph(FILE *file, flowInfo *list);
static void print_flow_calls(FILE *file, flowInfo *calls, int depth);
static int set_global_option(char *arg);

#define FNAME 1

#line 569 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 127 "fflow.l"

#line 721 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 76 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 229 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 128 "fflow.l"
; /* eat up comments entirely */  
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 129 "fflow.l"
{
			action = ADDFUNC; 
			Type   = PROGRAM; 
			BEGIN FNAME;
		}  
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 134 "fflow.l"
{
			numfunc++;
			action = ADDFUNC; 
			Type   = FUNCTION; 
			BEGIN FNAME;
		}  
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 140 "fflow.l"
{
			numroutine++;
			action = ADDFUNC; 
			Type   = SUBROUTINE; 
			BEGIN FNAME;
		} 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 146 "fflow.l"
{
			numcall++;
			action = ADDCALL; 
			Type   = UNKNOWN;
			BEGIN FNAME;
		}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 152 "fflow.l"
{
		/*
		* Depending on the action taken,
		* add a new function to the flowgraph list or
		* add an entry for a call made in the current 
		* function
		*/
			if(action == ADDFUNC)
				add_new_func(yytext, yylineno, curr_path, 
					curr_file, 0);
			else
				add_new_call(yytext, yylineno, 0);
			BEGIN 0;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 166 "fflow.l"
BEGIN 0;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 167 "fflow.l"
; /* do nothing  for all other remaining chars */ 
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 168 "fflow.l"
ECHO;
	YY_BREAK
#line 890 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(FNAME):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 76 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 76 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 75);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 168 "fflow.l"


/*****
* Print the flowgraph to the given file. We follow up to depth levels
* deep. If this depth is reached, recursion might be happening. If this
* is the case, the program aborts with an appropriate message. The
* default value for depth is MAXDEPTH, defined to 64. 
* 
* This routine is recursive.
*****/
static void 
print_flow_calls(FILE *file, flowInfo *calls, int depth)
{
	flowInfo *tmp;
	int i;

	/* return if we are cutoff_depth levels deep in the calltree */
	if(cutoff_depth && depth >= cutoff_depth)
		return;

	if(depth >= maxdepth) 
	{
		fprintf(stderr,"ERROR: I'm %i levels deep. This might indicate "
			"undetected recursion.\n", depth);
		if(calls->name) 
			fprintf(stderr, "Current function is %s in file %s%s\n",
				calls->name, calls->path, calls->file);  
		fprintf(stderr,"If this is no recursion, increase maxdepth by "
				"using -d\n"); 
		exit(9);
	} 
	for(tmp = calls; tmp != NULL; tmp = tmp->next)
	{
		if(tmp->parent || (skip_unknowns == 0 && tmp->Type != KNOWN)) 
		{
			fprintf(file,"%-5i",depth+1);
			for(i = 0 ; i < depth; i++)
				fprintf(file," %s", sep_char);
			fprintf(file," %s -> %s, line %i ", sep_char, tmp->name,
				tmp->defline);
			if(tmp->parent)
			{
				if(complete_graph || 
					tmp->parent->output_line == 0) 
				{
					if(full_names)
						fprintf(file,"(%s", 
							tmp->parent->path);
					else
						fprintf(file, "(");
					fprintf(file, "%s, line %i)\n",
						tmp->parent->file, 
						tmp->parent->defline);
					if(errno)
					{
						fprintf(stderr, "Write failed:"
							" %s\n", ErrorString());
						exit(6);
					}
					tmp->output_line = ++output_line;
					if(!tmp->parent->recursive && 
						tmp->parent->calls)
						print_flow_calls(file, 
							tmp->parent->calls, 
							depth+1);
				} 
				else if(!complete_graph)
				{
					fprintf(file, "==>> line %i <<==\n", 
						tmp->parent->output_line);
					output_line++;
				}
			} 
			else 
			{
				fprintf(file, "(<unknown>)\n");
				tmp->output_line = ++output_line;
			}
		}
	}
}

/*****
* Main flow graph printing routine
*****/
static void 
print_flow_graph(FILE *file, flowInfo *list)
{
	flowInfo *tmp, *start;

	if(start_at_program)
	{
		for(tmp=list; tmp!=NULL && tmp->Type!=PROGRAM; tmp=tmp->next);
		if(tmp == NULL)
		{
			fprintf(stderr,"\nCould not find PROGRAM anywhere, "
				"I'm stymied\n");
			exit(10);
		}
		start = tmp;
	}	
	else
		if(start_at_named_function) 
		{ 
			for(tmp = list; tmp != NULL && 
				strcasecmp(base_function_name, tmp->name); 
				tmp = tmp->next);
			if(tmp == NULL)
			{
				fprintf(stderr,"\nCould not find function or "
					"subroutine %s anywhere, "
					"I'm stymied\n", base_function_name);
				exit(11);
			}
			start = tmp;
		} 
		else
			start = list;

	if(!quiet) 
		printf("Writing to %s...\n", outfile); 
	fflush(stdout);
	fprintf(file, "%%\n%% Fortran flowgraph generated by fflow\n");
	fprintf(file, "%% args used: %s\n%%\n", cmd_line); 
	output_line = 5;

	if(start_at_named_function) 
	{
		fprintf(file, "\n%%\n%% Generated for %s\n%%\n", 
			base_function_name); 
		output_line += 4;
	}
	/* neat loop termination trick */
	for(tmp = start; tmp != NULL; 
		tmp=(ignore_unused_funcs ? NULL : tmp->next))
	{
		if(verbose)
			printf("Generating flowgraph for: %s\n", tmp->name);
		if(tmp->calls || !ignore_empty_funcs)
		{
			tmp->output_line = output_line++;
			switch(tmp->Type)
			{
				case PROGRAM:
					fprintf(file,"program");
					break;
				case FUNCTION:
					fprintf(file,"function");
					break;
				case SUBROUTINE:
					fprintf(file,"subroutine");
					break;
				default:	/* should not be reached */
					fprintf(file,"(unknown type)");
			}
			if(full_names)
				fprintf(file," %s (%s",tmp->name,tmp->path);
			else
				fprintf(file," %s (", tmp->name);
			fprintf(file,"%s, line %i)\n\n",tmp->file,tmp->defline);
			output_line++;
			print_flow_calls(file, tmp->calls, 0);
			fprintf(file,"\n"); 
			output_line++;
			if(verbose)
				fflush(stdout);
		}
	}
}

/*****
* Scan command line options
*****/
static int 
set_global_option(char *arg)
{ 
	switch(arg[0])
	{
		case 'c' :	/* generate a complete flowgraph */
			complete_graph = 1;
			break;
		case 'e' :	/* ignore empty functions */
			ignore_empty_funcs = 1;
			break;
		case 'f' :	/* use full names instead of filename only.*/
			full_names = 1 ;
			break;
		case 'h' :	/* help requested */
			printf(usage, progname, MAXDEPTH); 
			exit(2); 
		case 'i' :	/* don't print unresolved references */
			skip_unknowns = 1;
			break;
		case 'n' :	/* tell what subroutines are never invoked */
			never_invoked = 1;
			/* -n- will not generate a flowgraph */
			if(arg[1] != '\0' && arg[1] == '-')
			{
				no_graph = 1;
				return(1);
			}
			break;
#ifdef __MSDOS__
		case 'm' :	/* show memory usage under msdos */
			need_mem_info_for_msdos = 1;
			break;
#endif
		case 'p' :	/* start the flowgraph at PROGRAM */
			start_at_program = 1;
			break;
		case 'q' : 	/* be really quiet */
			quiet = 1; 
			verbose = 0; 
		case 't' :	/* use a tabs instead of | */
			sep_char = "\t";
			break;
		case 'u' :	/* ignore unreferenced functions */
			ignore_unused_funcs = 1;
			break;
		case 'v' : 	/* be verbose */
			verbose = 1; 
			break; 
		case 'E' :	/* an extension specification */
			SCAN_ARG("-E");
			if(num_extensions == MAXEXTS)
			{
				fprintf(stderr, "Capacity exceeded, more than "
					"%i extensions given on command line\n",
					MAXEXTS);
				fprintf(stderr,"Ignoring extension %s\n",arg+1);
			}
			else
			{
				checked_malloc(ext_table[num_extensions], 
					strlen(arg+1)+1, char);
				strcpy(ext_table[num_extensions++], arg+1);
#ifdef __MSDOS__	/* dos returns uppercase when building a filelist */
				upcase(ext_table[num_extensions-1]);
#endif
			}
			return(1);
		case 'I' :	/* a directory specification */
			SCAN_ARG("-I");
			if(num_dirs_to_visit == MAXDIRS)
			{
				fprintf(stderr,"Capacity exceeded, more than %i"
					" directories given on command line\n",
					MAXDIRS);
				fprintf(stderr,"Ignoring directory %s\n",arg+1);
			}
			else
			{
				checked_malloc(dirs_to_visit[num_dirs_to_visit],
					strlen(arg+1)+1, char);
				strcpy(dirs_to_visit[num_dirs_to_visit++], 
					arg+1); 
			}
			return(1);
		case 'd' : /* max. recursion depth */
			SCAN_ARG("-d");
			maxdepth = atoi(arg + 1);
			return(1);
		case 'l' : /* max. recursion depth */
			SCAN_ARG("-l");
			cutoff_depth = atoi(arg + 1);
			return(1);
		case 'o' :	/* name of the output file */
			SCAN_ARG("-o");
			outfile = arg + 1;
			return(1);
		case 's' :	/* start flowgraph at the given function name */
			start_at_named_function = 1;
			SCAN_ARG("-s");
			base_function_name = arg + 1;
			return(1); 
		case 'x' :	/* ignore the given file */
			SCAN_ARG("-x");
			if(num_ignore == MAXIGNORE)
			{
				fprintf(stderr, "Capacity exceeded, more than "
					"%i ignores given on command line\n",
					MAXIGNORE);
				fprintf(stderr, "Ignoring option -x%s\n",arg+1);
			}
			else
			{
				checked_malloc(ignore_list[num_ignore], 
					strlen(arg+1)+1, char);
				strcpy(ignore_list[num_ignore++], arg+1);
#ifdef __MSDOS__	/* dos returns uppercase when building a filelist */
				upcase(ignore_list[num_ignore-1]);
#endif
			}
			return(1);
		case '-' :	/* secondary options */
			if(!strcmp("help", arg+1))	/* help wanted */
			{
				printf(usage, progname, MAXDEPTH); 
				exit(2); 
			}
			if(!strcmp("version", arg+1))	/* show version id */
			{
				print_version_id(progname, VERSION, "$Revision: 1.9 $");
				exit(2);
			}		/* fall through */
		default:
			fprintf(stderr,"unknown option -%s\n", arg);
			exit(3);
	}
	return(0); 
}

/*****
* main for fflow
*****/
int 
main(int argc, char **argv)
{ 
	int i, narg; 
	char *arg; 

	/* set global default values */
	initialise(argv[0]);

	if(argc == 1)
	{
		fprintf(stderr, "%s: no files given\n",progname);
		printf(usage, progname, MAXDEPTH); 
		exit(4);
	}

	/* Default values */
	outfile = "stdout"; 
	sep_char = "|"; 
	maxdepth = MAXDEPTH; 
	cutoff_depth = 0;

	/* scan for any command line options and save a copy of it */
	arg = argv[narg = 1];
	while ( narg < argc && arg[0] == '-' )
	{
		if (arg[0] == '-')
		{ 
			int num_opts = strlen(arg) ; 
			for(i = 1 ; i < num_opts ; i++ )
			if(set_global_option(++arg)) 
				break;
		} 
		strcat(cmd_line, argv[narg]);
		strcat(cmd_line, " ");
		arg = argv[++narg];
	}

	/* if no directories or files are given, exit */
	if(num_dirs_to_visit == 0 && narg == argc) 
	{ 
		fprintf(stderr,"no files given.\n"); 
		exit(4); 
	} 

	/* install signal handlers */
	install_sig_handlers();

	/* open the output file */
	if(!strcmp(outfile, "stdout"))
		output_file = stdout;
	else if((output_file = fopen(outfile, "w")) == NULL)
	{
		perror(outfile);
		exit(6);
	}

	/*
	* always use this extension of none is given and directories are to be
	* searched. 3 equals the size of .f\0 
	*/
	if(num_dirs_to_visit && !num_extensions)
	{
		checked_malloc(ext_table[num_extensions], 3, char);
#ifdef __MSDOS__	/* msdos returns uppercase when building a filelist */
		ext_table[num_extensions++] = ".F";
#else
		ext_table[num_extensions++] = ".f";
#endif
	}

	/* when directories have been given on the cmdline, build a filelist */
	if(num_dirs_to_visit && verbose)
		printf("Scanning directories:\n");

	for(i = 0 ; i < num_dirs_to_visit; i++)
	{
		if(verbose)
			printf("%s\n", dirs_to_visit[i]); 
		build_file_list(&file_list, &num_files, dirs_to_visit[i],
			ext_table, num_extensions); 
	}

	/* see if we have files left on the command line */
	if(narg != argc)
	{
		for(i = narg ; i < argc ; i++)
		{
			checked_realloc(file_list, num_files+1, char*);
			checked_malloc(file_list[num_files], strlen(argv[i])+1,
				char);
			sprintf(file_list[num_files++], "%s", argv[i]); 
		}
		if(verbose && argc-narg !=0)
			printf("%i files given on command line.\n", argc - narg); 
	}

	/* show settings if we have to be verbose */
	if(verbose)
		print_settings();

	if(!quiet)
	{
		printf("Total Files to scan: %i\n", num_files); 
		printf("File to write to: %s\n", outfile);
	}
	fflush(stdout);

	/* purge any non-matching output from yylex to /dev/null */
	yyout = fopen(YYOUT_DEVICE, "w+");

	/* scan the file list */
	for(i = 0; i < num_files; i++)
	{
		if ((num_ignore == 0 ? 1 : ignore_this_file(file_list[i]))) 
		{
			/* reset scanner for this file */
			if((yyin = reset_scanner(file_list[i])) == NULL)
				continue;
			yylineno = 0;
			/* scan the file */
			yylex();
			/* 
			* flush the buffer of flex so we won't have 
			* any trailing stuff from the previous file 
			*/
			YY_FLUSH_BUFFER; 
			/* close input file */
			fclose(yyin);
			/* report some statistics if we have to */
			if(verbose) 
				print_file_stats(output_file, file_list[i], 
				yylineno);
		}
	}
	fclose(yyout);

	/* this is the final flowgraph data */
	flow = global_flow.head;

	if(!quiet) 
		printf("Sorting...\n"); 
	fflush(stdout);

	/* Sort the flowgraph */
	flow = sortAll(flow); 

	/* print the flow graph if thus wanted */
	if(no_graph == 0)
		print_flow_graph(output_file, flow);

	/* print subroutines that are never invoked */
	if(never_invoked)
		print_unused_routines(output_file, flow);

	/* close the output file */
	if(!strcmp(outfile, "stdout"))
	{
		fflush(output_file);
		fclose(output_file); 
	}
	if(!quiet)
		printf("Done, total files scanned: %i\n", i);

	/* when wanted, print msdos memory usage summary */
	print_dos_memory_usage();

	return(0);
}
